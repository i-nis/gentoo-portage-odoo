--- a/ws_sr_padron.py	2020-06-29 13:30:30.000000000 -0300
+++ b/ws_sr_padron.py	2020-07-15 16:54:54.794645000 -0300
@@ -1,5 +1,5 @@
-#!/usr/bin/python
-# -*- coding: latin-1 -*-
+#!/usr/bin/python3
+# -*- coding: utf-8 -*-
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by the
 # Free Software Foundation; either version 3, or (at your option) any later
@@ -10,9 +10,9 @@
 # or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 # for more details.
 
-"""Módulo para acceder a los datos de un contribuyente registrado en el Padrón
-de AFIP (WS-SR-PADRON de AFIP). Consulta a Padrón Alcance 4 version 1.1
-Consulta de Padrón Constancia Inscripción Alcance 5 version 2.0
+"""MÃ³dulo para acceder a los datos de un contribuyente registrado en el PadrÃ³n
+de AFIP (WS-SR-PADRON de AFIP). Consulta a PadrÃ³n Alcance 4 version 1.1
+Consulta de PadrÃ³n Constancia InscripciÃ³n Alcance 5 version 2.0
 """
 
 __author__ = "Mariano Reingart <reingart@gmail.com>"
@@ -27,19 +27,19 @@
 import os
 import sys
 
-from .utils import inicializar_y_capturar_excepciones, BaseWS, get_install_dir, json_serializer, abrir_conf, norm, SoapFault
+from pyafipws.utils import inicializar_y_capturar_excepciones, BaseWS, get_install_dir, json_serializer, abrir_conf, norm, SoapFault
 from configparser import SafeConfigParser
-from .padron import TIPO_CLAVE, PROVINCIAS
+from pyafipws.padron import TIPO_CLAVE, PROVINCIAS
 
 
 HOMO = False
 LANZAR_EXCEPCIONES = True
 WSDL = "https://awshomo.afip.gov.ar/sr-padron/webservices/personaServiceA4?wsdl"
-CONFIG_FILE = "rece.ini"
+CONFIG_FILE = "/etc/pyafipws/rece.ini"
 
 
 class WSSrPadronA4(BaseWS):
-    "Interfaz para el WebService de Consulta Padrón Contribuyentes Alcance 4"
+    "Interfaz para el WebService de Consulta PadrÃ³n Contribuyentes Alcance 4"
     _public_methods_ = ['Consultar',
                         'AnalizarXml', 'ObtenerTagXml', 'LoadTestXML',
                         'SetParametros', 'SetTicketAcceso', 'GetParametro',
@@ -63,7 +63,7 @@
     # Variables globales para BaseWS:
     HOMO = HOMO
     WSDL = WSDL
-    Version = "%s %s" % (__version__, HOMO and 'Homologación' or '')
+    Version = "%s %s" % (__version__, HOMO and 'HomologaciÃ³n' or '')
     Reprocesar = True  # recuperar automaticamente CAE emitidos
     LanzarExcepciones = LANZAR_EXCEPCIONES
     factura = None
@@ -154,7 +154,7 @@
         return True
 
     def analizar_datos(self, cat_mt):
-        # intenta determinar situación de IVA:
+        # intenta determinar situaciÃ³n de IVA:
         if 32 in self.impuestos:
             self.imp_iva = "EX"
         elif 33 in self.impuestos:
@@ -167,7 +167,7 @@
         self.actividad_monotributo = cat_mt.get("descripcionCategoria") if cat_mt else ""
         self.integrante_soc = ""
         self.empleador = "S" if 301 in self.impuestos else "N"
-        # intenta determinar categoría de IVA (confirmar)
+        # intenta determinar categorÃ­a de IVA (confirmar)
         if self.imp_iva in ('AC', 'S'):
             self.cat_iva = 1  # RI
         elif self.imp_iva == 'EX':
@@ -180,7 +180,7 @@
 
 
 class WSSrPadronA5(WSSrPadronA4):
-    "Interfaz para el WebService de Consulta Padrón Constancia de Inscripción Alcance 5"
+    "Interfaz para el WebService de Consulta PadrÃ³n Constancia de InscripciÃ³n Alcance 5"
 
     _reg_progid_ = "WSSrPadronA5"
     _reg_clsid_ = "{DF7447DD-EEF3-4E6B-A93B-F969B5075EC8}"
@@ -236,7 +236,7 @@
         self.domicilio = "%s - %s (%s) - %s" % (
             self.direccion, self.localidad,
             self.cod_postal, self.provincia,)
-        # extraer datos impositivos (inscripción / opción) para unificarlos:
+        # extraer datos impositivos (inscripciÃ³n / opciÃ³n) para unificarlos:
         data_mt = ret.get("datosMonotributo", {})
         data_rg = ret.get("datosRegimenGeneral", {})
         # analizo impuestos:
@@ -250,7 +250,7 @@
 
 
 def main():
-    "Función principal de pruebas (obtener CAE)"
+    "FunciÃ³n principal de pruebas (obtener CAE)"
     import os
     import time
     global CONFIG_FILE
@@ -281,7 +281,7 @@
         url_ws = config.get(SECTION, 'URL')
 
     # obteniendo el TA para pruebas
-    from .wsaa import WSAA
+    from pyafipws.wsaa import WSAA
 
     cache = ""
     ta = WSAA().Autenticar(service, crt, key, url_wsaa)
@@ -321,7 +321,7 @@
                     if e.faultstring != "No existe persona con ese Id":
                         raise
                 print('ok' if ok else "error", padron.Excepcion)
-                # domicilio posiblemente esté en Latin1, normalizar
+                # domicilio posiblemente estÃ© en Latin1, normalizar
                 csv_writer.writerow([norm(getattr(padron, campo, ""))
                                      for campo in columnas])
         sys.exit(0)
@@ -366,7 +366,7 @@
         print(padron.XmlResponse)
 
 
-# busco el directorio de instalación (global para que no cambie si usan otra dll)
+# busco el directorio de instalaciÃ³n (global para que no cambie si usan otra dll)
 INSTALL_DIR = WSSrPadronA4.InstallDir = WSSrPadronA5.InstallDir = get_install_dir()
 
 
